<%
require "emoji_data"
# First detect if we have options passed in by a proxy or not.
# In config.rb, any .html.markdown files are proxied to a template file. That template file
# is also passed the markdown files YAML metadata. We are detecting here if that metadata
# is present. If it isn't, we use the template file's metadata.
#
# Additionally, if the file is a .html.haml file, we just it's native metadata and don't
# worry about any of this.
if locals and locals.has_key? :markdown_source
  slideshow_source = File.open(Dir.pwd + "/source/#{locals[:markdown_source]}").read
  if slideshow_source =~ /^---/
    slide_configuration_data = YAML.load slideshow_source.split(/---/)[1]
  else
    slide_configuration_data = {}
  end
else
  slideshow_source = File.open(current_page.source_file).read
  slide_configuration_data = current_resource.data
end

# Load the slideshow source:
if locals and locals.has_key? :markdown_source
  slideshow_source = File.open(Dir.pwd + "/source/#{locals[:markdown_source]}").read
else
  slideshow_source = File.open(current_page.source_file).read
end

# Attach twitter name to each slide.
# Defaults to default_twitter_name (above) unless twitter_name is set.
# Defaults to not showing a slide on the first slide unless twitter_name_start is set (1 indexed).
default_twitter_name = data.config.default_twitter.name
default_twitter_name_start = data.config.default_twitter.start
attach_twitter_name = slide_configuration_data["twitter"]
slideshow_css_file = slide_configuration_data.has_key?("css") ? slide_configuration_data["css"] : "slides"
slideshow_css_file = "remark/themes/#{slide_configuration_data["theme"]}/theme" if slide_configuration_data.has_key?("theme")

load_mermaid = false
if slideshow_source =~ /\<div class=["']mermaid/
  load_mermaid = true
end

# Test for Charts.js support
# To load chart support, you also need to have a javascript file in source/javascripts/XX/YY.js where XX and YY matches the file path of your remark presentation (so source/remark/XX/YY.html is how you get the values).
# This javascript file needs to have one function, called "load_charts()."
# This function will contain all the initialization calls to Charts.js.
if slideshow_source =~ /\<canvas/
  chart_type = "Charts.js"
  load_charts = true
elsif slideshow_source =~ /\<svg/
  chart_type = "nv.d3.js"
  load_charts = true
end
if load_charts
  chart_file_js = sitemap.resources.select{|a| (a.destination_path.match current_resource.destination_path.gsub(/\.html/,".js"))}[0]
  if !chart_file_js.nil?
    chart_file_js = chart_file_js.destination_path.gsub(/javascripts\//,"")
  else
    load_charts = false
  end
end
has_emoji = (EmojiData.scan(slideshow_source).length > 0)

# Test for progress_bar support. Can be added by setting progress_bar to true in the slide metadata.
attach_progress_bar = slide_configuration_data["progress_bar"]
%>
<html>
  <head>
    <meta charset="utf-8">
    <base target="_blank">
    <title>
      <%= slide_configuration_data["title"] if slide_configuration_data["title"]%>
    </title>
    <%= stylesheet_link_tag("https://cdn.jsdelivr.net/gh/layerssss/icomoon-bower/style.min.css", :media => "all", :rel => "stylesheet" ) %>
    <%= stylesheet_link_tag("https://cdn.rawgit.com/tonsky/FiraCode/8fdf83ff/distr/fira_code.css") %>
    <%= stylesheet_link_tag("https://cdn.jsdelivr.net/gh/FontFaceKit/open-sans/open-sans.min.css") %>
    <%= stylesheet_link_tag("remark/#{slideshow_css_file}.css", :media => "all", :rel => "stylesheet" ) %>
    <%
      slideshow_specific_css = sitemap.resources.select{|a| (a.destination_path.match current_resource.destination_path.gsub(/\.html/,".css"))}[0]
      if !slideshow_specific_css.nil? and File.basename(slideshow_specific_css.destination_path) != "slides.css"%>
        <%= stylesheet_link_tag(slideshow_specific_css.destination_path.gsub(/stylesheets\//,""), :media => "all", :rel => "stylesheet" )%>
      <% end %>
      <%= javascript_include_tag("https://cdnjs.cloudflare.com/ajax/libs/script.js/2.5.9/script.min.js")%>
      <%
        # Assemble the call to head.js (ie. establish which libraries need loading)
        # We generate the call to the function, as well as any intialization code to run
        # after head.load() has run.
        scriptjs_array = []
        scriptjs_load_callbacks = []
        scriptjs_array.push("https://cdnjs.cloudflare.com/ajax/libs/remark/0.14.0/remark.min.js")
        scriptjs_array.push(javascript_path("remark/add-ons/haml.language.js"))
        scriptjs_array.push(javascript_path("remark/add-ons/remark.language.js"))
        scriptjs_array.push("https://cdnjs.cloudflare.com/ajax/libs/zepto/1.2.0/zepto.min.js")
        if load_mermaid
          scriptjs_array.push("https://cdnjs.cloudflare.com/ajax/libs/d3/5.11.0/d3.min.js")
          scriptjs_array.push("https://cdnjs.cloudflare.com/ajax/libs/mermaid/8.2.5/mermaid.min.js")
        end
        if has_emoji
          scriptjs_array.push("https://cdnjs.cloudflare.com/ajax/libs/twemoji/12.0.4/2/twemoji.min.js")
          scriptjs_load_callbacks.push("twemoji.parse(document.body);")
        end
        if load_charts and chart_type == "Charts.js"
          scriptjs_array.push("https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.js")
          scriptjs_array.push(javascript_path(chart_file_js))
        elsif load_charts and chart_type == "nv.d3.js"
          scriptjs_array.push("https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.js")
          scriptjs_array.push("https://cdnjs.cloudflare.com/ajax/libs/nvd3/1.8.6/nv.d3.min.js")
          scriptjs_array.push("https://cdnjs.cloudflare.com/ajax/libs/nvd3/1.8.6/nv.d3.min.css")
          scriptjs_array.push(javascript_path(chart_file_js))
        end
        if load_charts
          scriptjs_load_callbacks.push("load_charts();")
        end
        if attach_progress_bar
          scriptjs_array.push(javascript_path("remark/add-ons/progress-bar.js"))
          scriptjs_array.push(asset_path(:css, "remark/add-ons/progress-bar.css"))
          scriptjs_load_callbacks.push "attach_progress_bar(slideshow);"
        end
        if attach_twitter_name
          twitter_name = if slide_configuration_data["twitter_name"] then slide_configuration_data["twitter_name"] else default_twitter_name end
          if twitter_name.split(/,\s+/).length > 1
            twitter_name = twitter_name.split(/,\s+/)
          end
          twitter_name_start = if slide_configuration_data["twitter_name_start"] then (slide_configuration_data["twitter_name_start"] - 1) else (default_twitter_name_start - 1) end

          scriptjs_load_callbacks.push "var twitter_name = \"#{twitter_name.kind_of?(Array) ? '<span class=\"twitter_badge\">@' + twitter_name.join('</span> <span class=\"twitter_badge\">@') + '</span>' : '<span class=\"twitter_badge\">@' + twitter_name + '</span>'}\";"
          scriptjs_load_callbacks.push "$('.remark-slide-content').slice(#{twitter_name_start}).each(function(i,slide){"
          scriptjs_load_callbacks.push "\t$(slide).append('<div class=\"twitter_name\">' + twitter_name +  '</div>');"
          scriptjs_load_callbacks.push "});"
        end
        def variable_name(path)
          File.basename(path).gsub(".min", "").gsub(/\W/, "_")
        end
        scriptjs_array.uniq!
        scriptjs_call = scriptjs_array.map { |x| variable_name(x)}.join(", ")
    %>
    <script>
// The javascript files to be loaded are determined by Middleman at compile:
var <%=scriptjs_array.map { |x| "#{variable_name(x)} = \"#{x}\""}.join(",\n\t  ")%>
;

// This call to head.js is automatically determined by Middleman at compile:
$script([<%=scriptjs_call%>], function(){

  // Ugly fix of HAML's formatting problems:
  document.getElementById("source").innerHTML = document.getElementById("source").innerHTML.replace(/^\s{4}/gm,"");

  // Load the slideshow:
  var slideshow = remark.create({
    navigation: {
      scroll: false,
      touch: true
    },
    highlightLanguage: 'javascript',
    highlightStyle: 'zenburn'
  });
  // Lightning Timer!
  var lightningTimer = <%= !slide_configuration_data["lightning"].nil? ? slide_configuration_data["lightning"] * 1000 : 0%>;
  if(lightningTimer > 0) {
    var lightningInterval = setInterval(function moveLightningSlide() {
      slideshow.gotoNextSlide();
    }, lightningTimer);
    document.addEventListener('beforeunload', function() { clearInterval(lightningInterval); });
  }
  // Reload / re-init things that have to be shown to work:
  function loadExtraThings() {
    // Juxtapose
    var juxtapose = document.querySelector('.remark-visible .juxtapose');
    if (juxtapose !== null && juxtapose.getAttribute('data-seen') !== 'true') {
      juxtapose.src += '';
      juxtapose.setAttribute('data-seen', 'true');
    }
  }
  slideshow.on('afterShowSlide', loadExtraThings);
  var loadMermaid = <%=load_mermaid ? "true" : "false"%>;
  if(loadMermaid) {
    // https://github.com/knsv/mermaid/issues/360#issuecomment-255526258
    mermaid.initialize({
      startOnLoad: false,
      cloneCssStyles: false
    });
    function initMermaid() {
      var diagrams = document.querySelectorAll('.mermaid');
      var i;
      for(i=0;i<diagrams.length;i++){
        if(diagrams[i].offsetWidth>0){
          mermaid.init(undefined, diagrams[i]);
        }
      }
    }
    slideshow.on('afterShowSlide', initMermaid);
    initMermaid(slideshow.getSlides()[slideshow.getCurrentSlideIndex()]);
  }
  <%= if scriptjs_load_callbacks.length > 0 then "\n\t// Load any add-ons:" end %>
  <%=
    scriptjs_load_callbacks.join("\n  ")
  %>
});

    </script>
  </head>
  <body>
    <textarea id="source"><%= yield %></textarea>
  </body>
</html>
